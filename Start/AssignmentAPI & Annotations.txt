API & Annotations Assignment:
-----------------------------

1.

import java.time.*;
public class DateTimeAS 
{
    public static void main(String[] args) {
        
        LocalDateTime dt = LocalDateTime.now();
        System.out.println(dt);
    }
}

2.


import java.time.*;
public class DateTimeAS 
{
    public static void main(String[] args) 
    {
        LocalDate d = LocalDate.now();

        int n1 = d.getYear();
        int n2 = d.getMonthValue();
        int n3 = d.getDayOfMonth();

        System.out.println(n2+"/"+n3+"/"+n1);
    }
}

3.

->collections are used to store the data into a datastructure like list,set or map.
->collections doesnot use functional interface.

->Streams are used to perform opeartions without affecting the original list,set,or map.
->Streams use functional interface.


import java.util.stream;
import java.util.stream.Stream;
import java.util.ArrayList;
import java.util.List;
public class StreamApi 
{
       public static void main(String[] args) 
       {
            List<Integer> l = new ArrayList<>();
            l.add(1);
            l.add(2);
            l.add(34);
            l.add(14);
            l.add(15);
            l.add(61);
            l.add(17);

            System.out.println(l);

            Stream<Integer> s = l.stream();

            l.stream().sorted().forEach(System.out::println);   
       } 
}

4.

->enum used to store named constants.

import java.util.*;

enum colours
{
    VIOLET,INDIGO,BLUE,GREEN,YELLOW,ORANGE,RED;
    String colour;
    colours()
    {
        System.out.println("This is a colour");
    }
    void setColours(String colour)
    {
        this.colour=colour;
    }
    String getColours()
    {
        return colour;
    }
}
public class EnumApi 
{
    public static void main(String[] args) 
    {
        
        colours.RED.setColours("RED");
        String m = colours.RED.getColours();;
        System.out.println(m);

        for(colours c:colours.values())
        {
            System.out.println(c);
        }
    }
}

5.

Built in annotations in java
->@Override
->@FunctionalInterface
->@Inherited
->@Depreciated
->@SafeVarags







